// File: src/components/MyDonationQueue.js

import { useEffect, useState, useCallback } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { getDonationQueue, removeDonationFromQueue, createDonationOrder } from '../lib/api/donations'; 

const QueueItemCard = ({ item, onRemove, isRemoving, submittingOrder }) => {
    const claim = item.claimId;
    const pendingDonation = item.donationId; 
    const isReadyToDonate = claim.status === 'Approved' || (claim.status === 'Fully Funded' && pendingDonation.status === 'PENDING');
    
    const monthlyAmount = pendingDonation?.amount || 200; 

    return (
        <div className="bg-white p-5 rounded-xl shadow-lg border border-gray-100 flex items-center justify-between transition-shadow hover:shadow-xl">
            <div className="flex-1 min-w-0">
                <h3 className="text-lg font-bold text-teal-900 truncate">{claim.title}</h3>
                <p className="text-sm text-gray-500">{claim.type}</p>
                <p className="mt-1 text-base font-semibold text-teal-600">
                    Monthly Donation: â‚¹{monthlyAmount.toLocaleString()}
                </p>
                <span className={`mt-1 inline-block text-xs font-medium ${isReadyToDonate ? 'text-green-600' : 'text-red-600'}`}>
                    Status: {claim.status}
                </span>
            </div>
            
            <div className="flex flex-col gap-2 items-end ml-4">
                <button
                    onClick={() => onRemove(pendingDonation._id)}
                    disabled={isRemoving || submittingOrder}
                    className="px-3 py-1 text-xs rounded-full bg-red-500 text-white hover:bg-red-600 disabled:opacity-50 transition-colors"
                >
                    {isRemoving ? 'Removing...' : 'Remove'}
                </button>
                <button
                    onClick={() => submittingOrder(pendingDonation._id)} 
                    disabled={!isReadyToDonate || isRemoving || submittingOrder}
                    className="px-3 py-1 text-sm rounded-full bg-teal-600 text-white hover:bg-teal-700 disabled:opacity-50 transition-colors"
                >
                    Donate Now
                </button>
            </div>
        </div>
    );
};

export default function MyDonationQueue() {
    const navigate = useNavigate();
Â  Â  const [params] = useSearchParams();
Â  Â  
Â  Â  const [queue, setQueue] = useState([]);
Â  Â  const [loading, setLoading] = useState(true);
Â  Â  const [error, setError] = useState(null);
Â  Â  const [message, setMessage] = useState('');
Â  Â  
Â  Â  const [removingId, setRemovingId] = useState(null);
Â  Â  const [isProcessingOrder, setIsProcessingOrder] = useState(false);

Â  Â  const fetchQueue = useCallback(async () => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  Â  Â  const data = await getDonationQueue();
Â  Â  Â  Â  Â  Â  setQueue(data);
Â  Â  Â  Â  } catch (e) {
Â  Â  Â  Â  Â  Â  setError(`Failed to load queue: ${e.message || 'Check connection.'}`);
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  }
Â  Â  }, []);

Â  Â  useEffect(() => {
Â  Â  Â  Â  fetchQueue();
Â  Â  Â  Â  
Â  Â  Â  Â  if (params.get('added')) {
Â  Â  Â  Â  Â  Â  setMessage('Claim successfully added to your donation queue! You can proceed to donate.');
Â  Â  Â  Â  Â  Â  navigate({ search: '' }, { replace: true });
Â  Â  Â  Â  }
Â  Â  }, [fetchQueue, params, navigate]);

Â  Â  const handleRemove = async (donationId) => {
Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  setMessage('');
Â  Â  Â  Â  setRemovingId(donationId);
Â  Â  Â  Â  
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  await removeDonationFromQueue(donationId);
Â  Â  Â  Â  Â  Â  setMessage('Claim removed from queue.');
Â  Â  Â  Â  Â  Â  setQueue(prev => prev.filter(item => item.donationId._id !== donationId));
Â  Â  Â  Â  } catch (e) {
Â  Â  Â  Â  Â  Â  setError(`Failed to remove claim: ${e.message || 'Try again.'}`);
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setRemovingId(null);
Â  Â  Â  Â  }
Â  Â  };
Â  Â  const handleCreateOrder = async (donationId) => {
Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  setMessage('');
Â  Â  Â  Â  setIsProcessingOrder(true);
Â  Â  Â  Â  
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const orderResult = await createDonationOrder(donationId); 
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  setMessage('Payment gateway opened...');
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  console.log("Simulating Razorpay Payment initiation with order:", orderResult);
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  } catch (e) {
Â  Â  Â  Â  Â  Â  setError(`Failed to start payment: ${e.message || 'Check claim status.'}`);
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setIsProcessingOrder(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  return (
Â  Â  Â  Â  <div className="min-h-screen py-10 px-4">
Â  Â  Â  Â  Â  Â  <div className="max-w-4xl mx-auto">
Â  Â  Â  Â  Â  Â  Â  Â  <h1 className="text-3xl font-extrabold text-teal-700 mb-6">My Donation Queue</h1>
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  {/* Messages */}
Â  Â  Â  Â  Â  Â  Â  Â  {error && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="p-3 mb-4 rounded-lg bg-red-100 text-red-700 border border-red-400">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Error: {error}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  {message && !error && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="p-3 mb-4 rounded-lg bg-green-100 text-green-700 border border-green-400">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {message}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  {/* Queue List */}
Â  Â  Â  Â  Â  Â  Â  Â  {queue.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="p-10 text-center bg-white rounded-xl shadow-lg border">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xl text-gray-500">Your donation queue is empty! ðŸ˜­</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="mt-2 text-gray-600">Browse approved claims to add items here.</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <a href="/" className="mt-4 inline-block text-teal-600 font-semibold hover:text-teal-800 transition-colors">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Go to Claims Dashboard â†’
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </a>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {queue.map(item => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <QueueItemCard 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={item._id || item.claimId._id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  item={item}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onRemove={handleRemove}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isRemoving={removingId === item.claimId._id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  submittingOrder={handleCreateOrder}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="mt-8 pt-4 border-t text-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-600">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Total {queue.length} claims in queue. Click 'Donate Now' to proceed with payment.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
    );
}